<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python版本控制与包管理工具</title>
      <link href="/2021/10/06/python%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/10/06/python%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pip包管理工具"><a href="#pip包管理工具" class="headerlink" title="pip包管理工具"></a>pip包管理工具</h1><h2 id="什么是pip"><a href="#什么是pip" class="headerlink" title="什么是pip"></a>什么是pip</h2><p>pip 是 Python 的包安装程序。其实，pip 就是 Python 标准库（The Python Standard Library）中的一个包，只是这个包比较特殊，用它可以来管理 Python 标准库（The Python Standard Library）中其他的包。pip 支持从 <a href="https://pypi.org/">PyPI</a>，版本控制，本地项目以及直接从分发文件进行安装。pip 是一个命令行程序。 安装 pip 后，会向系统添加一个 pip 命令，该命令可以从命令提示符运行。目前，pip 是 The Python Packaging Authority (PyPA) 推荐的 Python 包管理工具。</p><p><a href="https://pip.pypa.io/en/stable/user_guide/">用户手册</a></p><h2 id="pip命令"><a href="#pip命令" class="headerlink" title="pip命令"></a>pip命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  pip install [options] &lt;requirement specifier&gt; [package-index-options] ...</span><br><span class="line">  pip install [options] -r &lt;requirements file&gt; [package-index-options] ...</span><br><span class="line">  pip install [options] [-e] &lt;vcs project url&gt; ...</span><br><span class="line">  pip install [options] [-e] &lt;local project path&gt; ...</span><br><span class="line">  pip install [options] &lt;archive url/path&gt; ...</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  Install packages from:</span><br><span class="line"></span><br><span class="line">  - PyPI (and other indexes) using requirement specifiers.</span><br><span class="line">  - VCS project urls.</span><br><span class="line">  - Local project directories.</span><br><span class="line">  - Local or remote source archives.</span><br><span class="line"></span><br><span class="line">  pip also supports installing from &quot;requirements files&quot;, which provide</span><br><span class="line">  an easy way to specify a whole environment to be installed.</span><br><span class="line"></span><br><span class="line">Install Options:</span><br><span class="line">  -r, --requirement &lt;file&gt;    Install from the given requirements file. This option can be used multiple times.</span><br><span class="line">  -c, --constraint &lt;file&gt;     Constrain versions using the given constraints file. This option can be used multiple times.</span><br><span class="line">  --no-deps                   Don&#x27;t install package dependencies.</span><br><span class="line">  --pre                       Include pre-release and development versions. By default, pip only finds stable versions.</span><br><span class="line">  -e, --editable &lt;path/url&gt;   Install a project in editable mode (i.e. setuptools &quot;develop mode&quot;) from a local project path or a</span><br><span class="line">                              VCS url.</span><br><span class="line">  -t, --target &lt;dir&gt;          Install packages into &lt;dir&gt;. By default this will not replace existing files/folders in &lt;dir&gt;. Use</span><br><span class="line">                              --upgrade to replace existing packages in &lt;dir&gt; with new versions.</span><br><span class="line">  --platform &lt;platform&gt;       Only use wheels compatible with &lt;platform&gt;. Defaults to the platform of the running system.</span><br><span class="line">  --python-version &lt;python_version&gt;</span><br><span class="line">                              Only use wheels compatible with Python interpreter version &lt;version&gt;. If not specified, then the</span><br><span class="line">                              current system interpreter minor version is used. A major version (e.g. &#x27;2&#x27;) can be specified to</span><br><span class="line">                              match all minor revs of that major version.  A minor version (e.g. &#x27;34&#x27;) can also be specified.</span><br><span class="line">  --implementation &lt;implementation&gt;</span><br><span class="line">                              Only use wheels compatible with Python implementation &lt;implementation&gt;, e.g. &#x27;pp&#x27;, &#x27;jy&#x27;, &#x27;cp&#x27;,  or</span><br><span class="line">                              &#x27;ip&#x27;. If not specified, then the current interpreter implementation is used.  Use &#x27;py&#x27; to force</span><br><span class="line">                              implementation-agnostic wheels.</span><br><span class="line">  --abi &lt;abi&gt;                 Only use wheels compatible with Python abi &lt;abi&gt;, e.g. &#x27;pypy_41&#x27;.  If not specified, then the</span><br><span class="line">                              current interpreter abi tag is used.  Generally you will need to specify --implementation,</span><br><span class="line">                              --platform, and --python-version when using this option.</span><br><span class="line">  --user                      Install to the Python user install directory for your platform. Typically ~/.local/, or</span><br><span class="line">                              %APPDATA%\Python on Windows. (See the Python documentation for site.USER_BASE for full details.)</span><br><span class="line">  --root &lt;dir&gt;                Install everything relative to this alternate root directory.</span><br><span class="line">  --prefix &lt;dir&gt;              Installation prefix where lib, bin and other top-level folders are placed</span><br><span class="line">  -b, --build &lt;dir&gt;           Directory to unpack packages into and build in. Note that an initial build still takes place in a</span><br><span class="line">                              temporary directory. The location of temporary directories can be controlled by setting the TMPDIR</span><br><span class="line">                              environment variable (TEMP on Windows) appropriately. When passed, build directories are not</span><br><span class="line">                              cleaned in case of failures.</span><br><span class="line">  --src &lt;dir&gt;                 Directory to check out editable projects into. The default in a virtualenv is &quot;&lt;venv path&gt;/src&quot;.</span><br><span class="line">                              The default for global installs is &quot;&lt;current dir&gt;/src&quot;.</span><br><span class="line">  -U, --upgrade               Upgrade all specified packages to the newest available version. The handling of dependencies</span><br><span class="line">                              depends on the upgrade-strategy used.</span><br><span class="line">  --upgrade-strategy &lt;upgrade_strategy&gt;</span><br><span class="line">                              Determines how dependency upgrading should be handled [default: only-if-needed]. &quot;eager&quot; -</span><br><span class="line">                              dependencies are upgraded regardless of whether the currently installed version satisfies the</span><br><span class="line">                              requirements of the upgraded package(s). &quot;only-if-needed&quot; -  are upgraded only when they do not</span><br><span class="line">                              satisfy the requirements of the upgraded package(s).</span><br><span class="line">  --force-reinstall           Reinstall all packages even if they are already up-to-date.</span><br><span class="line">  -I, --ignore-installed      Ignore the installed packages (reinstalling instead).</span><br><span class="line">  --ignore-requires-python    Ignore the Requires-Python information.</span><br><span class="line">  --no-build-isolation        Disable isolation when building a modern source distribution. Build dependencies specified by PEP</span><br><span class="line">                              518 must be already installed if this option is used.</span><br><span class="line">  --install-option &lt;options&gt;  Extra arguments to be supplied to the setup.py install command (use like --install-option=&quot;--</span><br><span class="line">                              install-scripts=/usr/local/bin&quot;). Use multiple --install-option options to pass multiple options</span><br><span class="line">                              to setup.py install. If you are using an option with a directory path, be sure to use absolute</span><br><span class="line">                              path.</span><br><span class="line">  --global-option &lt;options&gt;   Extra global options to be supplied to the setup.py call before the install command.</span><br><span class="line">  --compile                   Compile Python source files to bytecode</span><br><span class="line">  --no-compile                Do not compile Python source files to bytecode</span><br><span class="line">  --no-warn-script-location   Do not warn when installing scripts outside PATH</span><br><span class="line">  --no-warn-conflicts         Do not warn about broken dependencies</span><br><span class="line">  --no-binary &lt;format_control&gt;</span><br><span class="line">                              Do not use binary packages. Can be supplied multiple times, and each time adds to the existing</span><br><span class="line">                              value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or</span><br><span class="line">                              more package names with commas between them. Note that some packages are tricky to compile and may</span><br><span class="line">                              fail to install when this option is used on them.</span><br><span class="line">  --only-binary &lt;format_control&gt;</span><br><span class="line">                              Do not use source packages. Can be supplied multiple times, and each time adds to the existing</span><br><span class="line">                              value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or</span><br><span class="line">                              more package names with commas between them. Packages without binary distributions will fail to</span><br><span class="line">                              install when this option is used on them.</span><br><span class="line">  --prefer-binary             Prefer older binary packages over newer source packages.</span><br><span class="line">  --no-clean                  Don&#x27;t clean up build directories.</span><br><span class="line">  --require-hashes            Require a hash to check each requirement against, for repeatable installs. This option is implied</span><br><span class="line">                              when any package in a requirements file has a --hash option.</span><br><span class="line">  --progress-bar &lt;progress_bar&gt;</span><br><span class="line">                              Specify type of progress to be displayed [off|on|ascii|pretty|emoji] (default: on)</span><br><span class="line"></span><br><span class="line">Package Index Options:</span><br><span class="line">  -i, --index-url &lt;url&gt;       Base URL of Python Package Index (default https://pypi.org/simple). This should point to a</span><br><span class="line">                              repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the</span><br><span class="line">                              same format.</span><br><span class="line">  --extra-index-url &lt;url&gt;     Extra URLs of package indexes to use in addition to --index-url. Should follow the same rules as</span><br><span class="line">                              --index-url.</span><br><span class="line">  --no-index                  Ignore package index (only looking at --find-links URLs instead).</span><br><span class="line">  -f, --find-links &lt;url&gt;      If a url or path to an html file, then parse for links to archives. If a local path or file:// url</span><br><span class="line">                              that&#x27;s a directory, then look for archives in the directory listing.</span><br><span class="line">  --process-dependency-links  Enable the processing of dependency links.</span><br><span class="line"></span><br><span class="line">General Options:</span><br><span class="line">  -h, --help                  Show help.</span><br><span class="line">  --isolated                  Run pip in an isolated mode, ignoring environment variables and user configuration.</span><br><span class="line">  -v, --verbose               Give more output. Option is additive, and can be used up to 3 times.</span><br><span class="line">  -V, --version               Show version and exit.</span><br><span class="line">  -q, --quiet                 Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING,</span><br><span class="line">                              ERROR, and CRITICAL logging levels).</span><br><span class="line">  --log &lt;path&gt;                Path to a verbose appending log.</span><br><span class="line">  --proxy &lt;proxy&gt;             Specify a proxy in the form [user:passwd@]proxy.server:port.</span><br><span class="line">  --retries &lt;retries&gt;         Maximum number of retries each connection should attempt (default 5 times).</span><br><span class="line">  --timeout &lt;sec&gt;             Set the socket timeout (default 15 seconds).</span><br><span class="line">  --exists-action &lt;action&gt;    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort).</span><br><span class="line">  --trusted-host &lt;hostname&gt;   Mark this host as trusted, even though it does not have valid or any HTTPS.</span><br><span class="line">  --cert &lt;path&gt;               Path to alternate CA bundle.</span><br><span class="line">  --client-cert &lt;path&gt;        Path to SSL client certificate, a single file containing the private key and the certificate in</span><br><span class="line">                              PEM format.</span><br><span class="line">  --cache-dir &lt;dir&gt;           Store the cache data in &lt;dir&gt;.</span><br><span class="line">  --no-cache-dir              Disable the cache.</span><br><span class="line">  --disable-pip-version-check</span><br><span class="line">                              Don&#x27;t periodically check PyPI to determine whether a new version of pip is available for download.</span><br><span class="line">                              Implied with --no-index.</span><br><span class="line">  --no-color                  Suppress colored output</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="install命令"><a href="#install命令" class="headerlink" title="install命令"></a>install命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  pip install [options] &lt;requirement specifier&gt; [package-index-options] ...</span><br><span class="line">  pip install [options] -r &lt;requirements file&gt; [package-index-options] ...</span><br><span class="line">  pip install [options] [-e] &lt;vcs project url&gt; ...</span><br><span class="line">  pip install [options] [-e] &lt;local project path&gt; ...</span><br><span class="line">  pip install [options] &lt;archive url/path&gt; ...</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  Install packages from:</span><br><span class="line"></span><br><span class="line">  - PyPI (and other indexes) using requirement specifiers.</span><br><span class="line">  - VCS project urls.</span><br><span class="line">  - Local project directories.</span><br><span class="line">  - Local or remote source archives.</span><br><span class="line"></span><br><span class="line">  pip also supports installing from &quot;requirements files&quot;, which provide</span><br><span class="line">  an easy way to specify a whole environment to be installed.</span><br><span class="line"></span><br><span class="line">Install Options:</span><br><span class="line">  -r, --requirement &lt;file&gt;    Install from the given requirements file. This option can be used multiple times.</span><br><span class="line">  -c, --constraint &lt;file&gt;     Constrain versions using the given constraints file. This option can be used multiple times.</span><br><span class="line">  --no-deps                   Don&#x27;t install package dependencies.</span><br><span class="line">  --pre                       Include pre-release and development versions. By default, pip only finds stable versions.</span><br><span class="line">  -e, --editable &lt;path/url&gt;   Install a project in editable mode (i.e. setuptools &quot;develop mode&quot;) from a local project path or a</span><br><span class="line">                              VCS url.</span><br><span class="line">  -t, --target &lt;dir&gt;          Install packages into &lt;dir&gt;. By default this will not replace existing files/folders in &lt;dir&gt;. Use</span><br><span class="line">                              --upgrade to replace existing packages in &lt;dir&gt; with new versions.</span><br><span class="line">  --platform &lt;platform&gt;       Only use wheels compatible with &lt;platform&gt;. Defaults to the platform of the running system.</span><br><span class="line">  --python-version &lt;python_version&gt;</span><br><span class="line">                              Only use wheels compatible with Python interpreter version &lt;version&gt;. If not specified, then the</span><br><span class="line">                              current system interpreter minor version is used. A major version (e.g. &#x27;2&#x27;) can be specified to</span><br><span class="line">                              match all minor revs of that major version.  A minor version (e.g. &#x27;34&#x27;) can also be specified.</span><br><span class="line">  --implementation &lt;implementation&gt;</span><br><span class="line">                              Only use wheels compatible with Python implementation &lt;implementation&gt;, e.g. &#x27;pp&#x27;, &#x27;jy&#x27;, &#x27;cp&#x27;,  or</span><br><span class="line">                              &#x27;ip&#x27;. If not specified, then the current interpreter implementation is used.  Use &#x27;py&#x27; to force</span><br><span class="line">                              implementation-agnostic wheels.</span><br><span class="line">  --abi &lt;abi&gt;                 Only use wheels compatible with Python abi &lt;abi&gt;, e.g. &#x27;pypy_41&#x27;.  If not specified, then the</span><br><span class="line">                              current interpreter abi tag is used.  Generally you will need to specify --implementation,</span><br><span class="line">                              --platform, and --python-version when using this option.</span><br><span class="line">  --user                      Install to the Python user install directory for your platform. Typically ~/.local/, or</span><br><span class="line">                              %APPDATA%\Python on Windows. (See the Python documentation for site.USER_BASE for full details.)</span><br><span class="line">  --root &lt;dir&gt;                Install everything relative to this alternate root directory.</span><br><span class="line">  --prefix &lt;dir&gt;              Installation prefix where lib, bin and other top-level folders are placed</span><br><span class="line">  -b, --build &lt;dir&gt;           Directory to unpack packages into and build in. Note that an initial build still takes place in a</span><br><span class="line">                              temporary directory. The location of temporary directories can be controlled by setting the TMPDIR</span><br><span class="line">                              environment variable (TEMP on Windows) appropriately. When passed, build directories are not</span><br><span class="line">                              cleaned in case of failures.</span><br><span class="line">  --src &lt;dir&gt;                 Directory to check out editable projects into. The default in a virtualenv is &quot;&lt;venv path&gt;/src&quot;.</span><br><span class="line">                              The default for global installs is &quot;&lt;current dir&gt;/src&quot;.</span><br><span class="line">  -U, --upgrade               Upgrade all specified packages to the newest available version. The handling of dependencies</span><br><span class="line">                              depends on the upgrade-strategy used.</span><br><span class="line">  --upgrade-strategy &lt;upgrade_strategy&gt;</span><br><span class="line">                              Determines how dependency upgrading should be handled [default: only-if-needed]. &quot;eager&quot; -</span><br><span class="line">                              dependencies are upgraded regardless of whether the currently installed version satisfies the</span><br><span class="line">                              requirements of the upgraded package(s). &quot;only-if-needed&quot; -  are upgraded only when they do not</span><br><span class="line">                              satisfy the requirements of the upgraded package(s).</span><br><span class="line">  --force-reinstall           Reinstall all packages even if they are already up-to-date.</span><br><span class="line">  -I, --ignore-installed      Ignore the installed packages (reinstalling instead).</span><br><span class="line">  --ignore-requires-python    Ignore the Requires-Python information.</span><br><span class="line">  --no-build-isolation        Disable isolation when building a modern source distribution. Build dependencies specified by PEP</span><br><span class="line">                              518 must be already installed if this option is used.</span><br><span class="line">  --install-option &lt;options&gt;  Extra arguments to be supplied to the setup.py install command (use like --install-option=&quot;--</span><br><span class="line">                              install-scripts=/usr/local/bin&quot;). Use multiple --install-option options to pass multiple options</span><br><span class="line">                              to setup.py install. If you are using an option with a directory path, be sure to use absolute</span><br><span class="line">                              path.</span><br><span class="line">  --global-option &lt;options&gt;   Extra global options to be supplied to the setup.py call before the install command.</span><br><span class="line">  --compile                   Compile Python source files to bytecode</span><br><span class="line">  --no-compile                Do not compile Python source files to bytecode</span><br><span class="line">  --no-warn-script-location   Do not warn when installing scripts outside PATH</span><br><span class="line">  --no-warn-conflicts         Do not warn about broken dependencies</span><br><span class="line">  --no-binary &lt;format_control&gt;</span><br><span class="line">                              Do not use binary packages. Can be supplied multiple times, and each time adds to the existing</span><br><span class="line">                              value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or</span><br><span class="line">                              more package names with commas between them. Note that some packages are tricky to compile and may</span><br><span class="line">                              fail to install when this option is used on them.</span><br><span class="line">  --only-binary &lt;format_control&gt;</span><br><span class="line">                              Do not use source packages. Can be supplied multiple times, and each time adds to the existing</span><br><span class="line">                              value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or</span><br><span class="line">                              more package names with commas between them. Packages without binary distributions will fail to</span><br><span class="line">                              install when this option is used on them.</span><br><span class="line">  --prefer-binary             Prefer older binary packages over newer source packages.</span><br><span class="line">  --no-clean                  Don&#x27;t clean up build directories.</span><br><span class="line">  --require-hashes            Require a hash to check each requirement against, for repeatable installs. This option is implied</span><br><span class="line">                              when any package in a requirements file has a --hash option.</span><br><span class="line">  --progress-bar &lt;progress_bar&gt;</span><br><span class="line">                              Specify type of progress to be displayed [off|on|ascii|pretty|emoji] (default: on)</span><br><span class="line"></span><br><span class="line">Package Index Options:</span><br><span class="line">  -i, --index-url &lt;url&gt;       Base URL of Python Package Index (default https://pypi.org/simple). This should point to a</span><br><span class="line">                              repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the</span><br><span class="line">                              same format.</span><br><span class="line">  --extra-index-url &lt;url&gt;     Extra URLs of package indexes to use in addition to --index-url. Should follow the same rules as</span><br><span class="line">                              --index-url.</span><br><span class="line">  --no-index                  Ignore package index (only looking at --find-links URLs instead).</span><br><span class="line">  -f, --find-links &lt;url&gt;      If a url or path to an html file, then parse for links to archives. If a local path or file:// url</span><br><span class="line">                              that&#x27;s a directory, then look for archives in the directory listing.</span><br><span class="line">  --process-dependency-links  Enable the processing of dependency links.</span><br><span class="line"></span><br><span class="line">General Options:</span><br><span class="line">  -h, --help                  Show help.</span><br><span class="line">  --isolated                  Run pip in an isolated mode, ignoring environment variables and user configuration.</span><br><span class="line">  -v, --verbose               Give more output. Option is additive, and can be used up to 3 times.</span><br><span class="line">  -V, --version               Show version and exit.</span><br><span class="line">  -q, --quiet                 Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING,</span><br><span class="line">                              ERROR, and CRITICAL logging levels).</span><br><span class="line">  --log &lt;path&gt;                Path to a verbose appending log.</span><br><span class="line">  --proxy &lt;proxy&gt;             Specify a proxy in the form [user:passwd@]proxy.server:port.</span><br><span class="line">  --retries &lt;retries&gt;         Maximum number of retries each connection should attempt (default 5 times).</span><br><span class="line">  --timeout &lt;sec&gt;             Set the socket timeout (default 15 seconds).</span><br><span class="line">  --exists-action &lt;action&gt;    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort).</span><br><span class="line">  --trusted-host &lt;hostname&gt;   Mark this host as trusted, even though it does not have valid or any HTTPS.</span><br><span class="line">  --cert &lt;path&gt;               Path to alternate CA bundle.</span><br><span class="line">  --client-cert &lt;path&gt;        Path to SSL client certificate, a single file containing the private key and the certificate in</span><br><span class="line">                              PEM format.</span><br><span class="line">  --cache-dir &lt;dir&gt;           Store the cache data in &lt;dir&gt;.</span><br><span class="line">  --no-cache-dir              Disable the cache.</span><br><span class="line">  --disable-pip-version-check</span><br><span class="line">                              Don&#x27;t periodically check PyPI to determine whether a new version of pip is available for download.</span><br><span class="line">                              Implied with --no-index.</span><br><span class="line">  --no-color                  Suppress colored output</span><br></pre></td></tr></table></figure><p>上面一大堆，总结来说，安装命令就是：<code>pip install &lt;包名&gt; 或 pip install -r requirements.txt</code>（对于本地安装包可以指定路径）。唯一需要特殊说明的是，安装时可以指定版本号来安装，举例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install SomePackage              # 最新版本</span><br><span class="line">pip install SomePackage==1.0.4       # 指定版本</span><br><span class="line">pip install &#x27;SomePackage&gt;=1.0.4&#x27;     # 最小版本</span><br></pre></td></tr></table></figure><h3 id="uninstall命令"><a href="#uninstall命令" class="headerlink" title="uninstall命令"></a>uninstall命令</h3><p>卸载安装包命令：<code>pip uninstall &lt;包名&gt; 或 pip uninstall -r requirements.txt</code>  与install类似</p><h3 id="升级包命令"><a href="#升级包命令" class="headerlink" title="升级包命令"></a>升级包命令</h3><p><code>pip install -U &lt;包名&gt; 或：pip install &lt;包名&gt; --upgrade</code> </p><p>升级指定的包，通过使用==, &gt;=, &lt;=, &gt;, &lt; 来指定一个版本号。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>列出当前已经安装的包。使用命令<code>pip list -o</code>则可查询可升级的包。</p><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p>显示包所在目录及信息，格式为：<code>pip show &lt;包名&gt;</code>。如果不加包名，则提示<code>ERROR: Please provide a package name or names.</code>。</p><p><code>**pip show -f &lt;包名&gt;</code>  查看指定包的详细信息</p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>搜索包，格式为：<code>pip search &lt;搜索关键字&gt;</code>。如果不写关键字，则提示<code>ERROR: Missing required argument (search query).</code>。</p><h1 id="anaconda版本控制"><a href="#anaconda版本控制" class="headerlink" title="anaconda版本控制"></a>anaconda版本控制</h1><h2 id="什么是anaconda"><a href="#什么是anaconda" class="headerlink" title="什么是anaconda"></a>什么是anaconda</h2><p>Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用<strong>Miniconda</strong>这个较小的发行版（仅包含conda和 Python）。</p><h2 id="anaconda的下载安装"><a href="#anaconda的下载安装" class="headerlink" title="anaconda的下载安装"></a>anaconda的下载安装</h2><p>在[Anaconda官方网站](<a href="https://www.anaconda.com/">Anaconda | The World’s Most Popular Data Science Platform</a>)正常下载安装，分为UI界面版本和命令行版本。</p><h2 id="conda命令"><a href="#conda命令" class="headerlink" title="conda命令"></a>conda命令</h2><h3 id="获取版本号"><a href="#获取版本号" class="headerlink" title="获取版本号"></a>获取版本号</h3><p><code>conda --version</code> 或 <code>conda -V</code> </p><h3 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h3><p><code>conda --help</code> 或 <code>conda -h</code> </p><p>查看某一命令的帮助，如update命令及remove命令:</p><p><code>conda update --help</code><br>       <code>conda remove --help</code></p><p>–help 可以换成 -h</p><h3 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>查看环境管理的全部命令帮助：  <code>conda env -h</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">positional arguments:</span><br><span class="line">  &#123;create,export,list,remove,update,config&#125;</span><br><span class="line">    create              Create an environment based on an environment file</span><br><span class="line">    export              Export a given environment</span><br><span class="line">    list                List the Conda environments</span><br><span class="line">    remove              Remove an environment</span><br><span class="line">    update              Update the current environment based on environment file</span><br><span class="line">    config              Configure a conda environment</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            Show this help message and exit.</span><br></pre></td></tr></table></figure><p>环境控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">列举当前所有环境:</span><br><span class="line">conda info --envs</span><br><span class="line">conda env list</span><br><span class="line"></span><br><span class="line">进入某个环境:</span><br><span class="line">activate &lt;your_env_name&gt;</span><br><span class="line"></span><br><span class="line">退出当前环境:</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">复制某个环境:</span><br><span class="line">conda create --name &lt;new_env_name&gt; --clone &lt;old_env_name&gt;</span><br></pre></td></tr></table></figure><h4 id="创建-删除环境"><a href="#创建-删除环境" class="headerlink" title="创建/删除环境"></a>创建/删除环境</h4><p><code>conda create --name &lt;your_env_name&gt;</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--name 可以更换为 -n</span><br><span class="line"></span><br><span class="line">创建指定版本的python环境：</span><br><span class="line">conda create --name &lt;your_env_name&gt; python=2.7</span><br><span class="line">conda create --name &lt;your_env_name&gt; python=&#x27;版本号&#x27;</span><br><span class="line"></span><br><span class="line">创建包含某些包的环境:</span><br><span class="line">conda create --name &lt;your_env_name&gt; numpy scipy</span><br><span class="line"></span><br><span class="line">创建指定python版本下包含某些包的环境：</span><br><span class="line">conda create --name &lt;your_env_name&gt; python=3.5 numpy scipy</span><br><span class="line"></span><br><span class="line">删除某个环境:</span><br><span class="line">conda remove --name &lt;your_env_name&gt; --all</span><br></pre></td></tr></table></figure><h3 id="分享环境"><a href="#分享环境" class="headerlink" title="分享环境"></a>分享环境</h3><p>首先通过<code>activate target_env</code>要分享的环境<code>target_env</code>，然后输入下面的命令会在当前工作目录下生成一个<code>environment.yml</code>文件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; environment.yml</span><br></pre></td></tr></table></figure><p>小伙伴拿到<code>environment.yml</code>文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env create -f environment.yml</span><br></pre></td></tr></table></figure><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">列举当前活跃环境下的所有包:</span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line">列举一个非当前活跃环境下的所有包:</span><br><span class="line">conda list -n &lt;your_env_name&gt;</span><br><span class="line"></span><br><span class="line">为指定环境安装某个包:</span><br><span class="line">conda install -n &lt;env_name&gt; &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">更新package_name文件包</span><br><span class="line">conda update &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">卸载package_name文件包</span><br><span class="line">conda uninstall &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">Conda 安装本地包</span><br><span class="line">    #pip 安装本地包</span><br><span class="line">    pip install   ～/Downloads/a.whl</span><br><span class="line">    #conda 安装本地包</span><br><span class="line">    conda install --use-local  ~/Downloads/a.tar.bz2</span><br><span class="line"></span><br><span class="line">安装指定版本的包</span><br><span class="line">    查看指定anaconda/tensorflow版本信息:</span><br><span class="line">        anaconda show tensorflow</span><br><span class="line">    输出结果会提供一个下载地址，使用下面命令就可指定安装1.8.0版本tensorflow: </span><br><span class="line">        conda install --channel https://conda.anaconda.org/anaconda tensorflow=1.8.0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="conda清理"><a href="#conda清理" class="headerlink" title="conda清理"></a>conda清理</h3><p>conda clean就可以轻松搞定！第一步：通过conda clean -p来删除一些没用的包，这个命令会检查哪些包没有在包缓存中被硬依赖到其他地方，并删除它们。第二步：通过conda clean -t可以将删除conda保存下来的tar包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda clean -p      //删除没有用的包</span><br><span class="line">conda clean -t      //删除tar包</span><br><span class="line">conda clean -y --all //删除所有的安装包及cache</span><br></pre></td></tr></table></figure><h1 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h1><h2 id="conda数据源管理"><a href="#conda数据源管理" class="headerlink" title="conda数据源管理"></a>conda数据源管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#显示目前conda的数据源有哪些</span><br><span class="line">conda config --show channels</span><br><span class="line"></span><br><span class="line">#添加数据源：例如, 添加清华anaconda镜像：</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"></span><br><span class="line">#删除数据源</span><br><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></table></figure><h2 id="pip数据源管理"><a href="#pip数据源管理" class="headerlink" title="pip数据源管理"></a>pip数据源管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#显示目前pip的数据源有哪些</span><br><span class="line">pip config list</span><br><span class="line">pip config list --[user|global] # 列出用户|全局的设置</span><br><span class="line">pip config get global.index-url # 得到这key对应的value 如：https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line"># 添加</span><br><span class="line">pip config set key value</span><br><span class="line">#添加数据源：例如, 添加USTC中科大的源：</span><br><span class="line">pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple</span><br><span class="line">#添加全局使用该数据源</span><br><span class="line">pip config set global.trusted-host https://mirrors.ustc.edu.cn/pypi/web/simple</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">pip config unset key</span><br><span class="line"># 例如</span><br><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line">#搜索</span><br><span class="line">pip search flask  #搜素flask安装包</span><br><span class="line"></span><br><span class="line"># 升级pip</span><br><span class="line">pip install pip -U</span><br></pre></td></tr></table></figure><h2 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pip国内源</span><br><span class="line">阿里云                    http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">中国科技大学         https://pypi.mirrors.ustc.edu.cn/simple/ </span><br><span class="line">豆瓣(douban)           http://pypi.douban.com/simple/ </span><br><span class="line">清华大学                https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中国科学技术大学  http://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">conda国内源</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/anaconda/</span><br><span class="line">https://mirrors.bfsu.edu.cn/anaconda/</span><br><span class="line">https://mirrors.nju.edu.cn/anaconda/</span><br><span class="line">https://mirrors.sjtug.sjtu.edu.cn/anaconda/</span><br></pre></td></tr></table></figure><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华源官方帮助文档</a></p><p><a href="https://mirrors.bfsu.edu.cn/help/anaconda/">北外源官方帮助文档</a></p><p><a href="https://nju-mirror-help.njuer.org/anaconda.html">南大源官方帮助文档</a></p><p><a href="https://mirrors.sjtug.sjtu.edu.cn/docs/anaconda">上交大源官方帮助文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#实验一：循环队列</title>
      <link href="/2021/09/20/C-%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
      <url>/2021/09/20/C-%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9A%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center><font size=5>实验一：熟悉C#语法和VS编程环境</font><hr><h1 id="实验描述"><a href="#实验描述" class="headerlink" title="实验描述"></a>实验描述</h1><p>2.1用C#构造一个队列Queue。要求此队列是循环队列，并进行入队、出队的测试。</p><p>个人经过测试，此代码可满足数据大小小于$2^{32}-1$的循环队列测试，具体操作如下</p><hr><h1 id="循环队列支持的操作"><a href="#循环队列支持的操作" class="headerlink" title="循环队列支持的操作"></a>循环队列支持的操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CQueue circle_queue = new CQueue(MAX_SIZE);</span><br><span class="line">//CQueue为定义的类名，circle_queue为创建的一个循环队列对象，MAX_SIZE为循环队列的最大长度（1~4294967295）</span><br></pre></td></tr></table></figure><h2 id="队列清空操作"><a href="#队列清空操作" class="headerlink" title="队列清空操作"></a>队列清空操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">circle_queue.Clear();</span><br><span class="line">//清空队列中所有元素</span><br></pre></td></tr></table></figure><h2 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">circle_queue.Empty();</span><br><span class="line">//boolean类型，若队列为空返回true，否则返回false</span><br></pre></td></tr></table></figure><h2 id="返回队列的长度"><a href="#返回队列的长度" class="headerlink" title="返回队列的长度"></a>返回队列的长度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle_queue.Length();</span><br></pre></td></tr></table></figure><h2 id="返回头元素（不出队）"><a href="#返回头元素（不出队）" class="headerlink" title="返回头元素（不出队）"></a>返回头元素（不出队）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle_queue.Gtehead();</span><br></pre></td></tr></table></figure><h2 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">circle_queue.put(int item);</span><br><span class="line">//向队尾插入一个int类型的元素</span><br></pre></td></tr></table></figure><h2 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle_queue.Poll();</span><br></pre></td></tr></table></figure><hr><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><p>循环队列与普通队列的区别在于其可以将空间最大利用，我们可以将其看成一个环状结构，如下图：</p><img src="../img/picture/pic1.png" alt="pic1" style="zoom: 67%;" /><p>循环队列初始化后队首队尾位置都为0，最大位置下标为MAX_SIZE - 1</p><p>在实现循环队列时所使用的基本数据结构还是数组，但是对数组下标位置上做了一些处理：</p><img src="../img/picture/pic2.png" alt="pic2" style="zoom: 80%;" /><p>当队尾元素和队首元素位于数组的最后一个位置时（这里以队尾位于数组最后一位时举例），要知道如果rear继续加1，数组就会越界，就无法实现循环这种操作。我们对每一次下标变化采取如下操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rear = (rear + 1) % maxsize;</span><br></pre></td></tr></table></figure><p>此操作可以确保队尾队首位置索引值不会超过数组的最大长度，而且在达到最大值时可以返回数组的第一个位置。</p><p>具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace homework1</span><br><span class="line">&#123;</span><br><span class="line">    public class CQueue</span><br><span class="line">    &#123;</span><br><span class="line">        private int[] data; //用于储存队列数据的数组</span><br><span class="line">        private int maxsize; //队列所能储存元素的最大容量</span><br><span class="line">        private int front; //队头元素的位置索引</span><br><span class="line">        private int rear; //队尾元素的位置索引</span><br><span class="line">        private uint length;</span><br><span class="line"></span><br><span class="line">        public CQueue(int size)  //构造函数,队列的初始化</span><br><span class="line">        &#123;</span><br><span class="line">            data = new int[size];</span><br><span class="line">            maxsize = size;</span><br><span class="line">            front = rear = 0;</span><br><span class="line">            length = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Clear() //清空该队列</span><br><span class="line">        &#123;</span><br><span class="line">            front = rear = 0;</span><br><span class="line">            length = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public bool Empty() //若队列为空，则返回1，否则返回0</span><br><span class="line">        &#123;</span><br><span class="line">            if(front == rear) return true;</span><br><span class="line">            else return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public uint Length() //返回队列长度</span><br><span class="line">        &#123;</span><br><span class="line">            return length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int GetHead() //若队列不空则返回头元素</span><br><span class="line">        &#123;</span><br><span class="line">            if(Empty())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;队列为空，请添加元素&quot;);</span><br><span class="line">                return -1;</span><br><span class="line">            &#125;</span><br><span class="line">            else return data[front];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Print() //打印队列中内容</span><br><span class="line">        &#123;</span><br><span class="line">            int i = front;</span><br><span class="line">            while(i != rear)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(data[i]);</span><br><span class="line">                i = (i + 1) % maxsize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void Put(int item) //向队尾插入元素</span><br><span class="line">        &#123;</span><br><span class="line">            if(Length() == maxsize)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;队列已满，无法添加元素&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            data[rear] = item;</span><br><span class="line">            rear = (rear + 1) % maxsize;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int Poll() //若队列不空则返回并删除队头元素</span><br><span class="line">        &#123;</span><br><span class="line">            if(Empty())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;队列为空，请添加元素&quot;);</span><br><span class="line">                return -1;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                int tmp = front;</span><br><span class="line">                front = (front + 1) % maxsize;</span><br><span class="line">                length--;</span><br><span class="line">                return data[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            CQueue cque = new CQueue(1000); //请在括号内输入队列的大小</span><br><span class="line">            //输入队列的相关操作</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C#实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C#实验 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法</title>
      <link href="/2021/09/19/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/2021/09/19/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序算法模板"><a href="#快速排序算法模板" class="headerlink" title="快速排序算法模板"></a>快速排序算法模板</h3><p>—— 模板题 AcWing 785. 快速排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">    <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序算法模板"><a href="#归并排序算法模板" class="headerlink" title="归并排序算法模板"></a>归并排序算法模板</h3><p>—— 模板题 AcWing 787. 归并排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数二分算法模板"><a href="#整数二分算法模板" class="headerlink" title="整数二分算法模板"></a>整数二分算法模板</h3><p>—— 模板题 AcWing 789. 数的范围</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数二分算法模板"><a href="#浮点数二分算法模板" class="headerlink" title="浮点数二分算法模板"></a>浮点数二分算法模板</h3><p>—— 模板题 AcWing 790. 数的三次方根</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>—— 模板题 AcWing 791. 高精度加法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, vector&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">add</span>(B, A);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p>—— 模板题 AcWing 792. 高精度减法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, vector&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘低精度"><a href="#高精度乘低精度" class="headerlink" title="高精度乘低精度"></a>高精度乘低精度</h3><p>—— 模板题 AcWing 793. 高精度乘法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h3><p>—— 模板题 AcWing 794. 高精度除法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p>—— 模板题 AcWing 795. 前缀和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S[i] = a[<span class="number">1</span>] + a[<span class="number">2</span>] + ... a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r] - S[l - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>—— 模板题 AcWing 796. 子矩阵的和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S[i, j] = 第i行j列格子左上部分所有元素的和</span><br><span class="line">以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line">S[x2, y2] - S[x1 - <span class="number">1</span>, y2] - S[x2, y1 - <span class="number">1</span>] + S[x1 - <span class="number">1</span>, y1 - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><p>—— 模板题 AcWing 797. 差分</p><p>给区间[l, r]中的每个数加上c：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B[l] += c, B[r + <span class="number">1</span>] -= c</span><br></pre></td></tr></table></figure><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p>—— 模板题 AcWing 798. 差分矩阵</p><p>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S[x1, y1] += c, S[x2 + <span class="number">1</span>, y1] -= c, S[x1, y2 + <span class="number">1</span>] -= c, S[x2 + <span class="number">1</span>, y2 + <span class="number">1</span>] += c</span><br></pre></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>—— 模板题 AcWing 801. 二进制中1的个数</p><p>求n的第k位数字: n &gt;&gt; k &amp; 1<br>返回n的最后一位1：lowbit(n) = n &amp; -n</p><h3 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h3><p>—— 模板题 AcWIng 799. 最长连续不重复子序列, AcWing 800. 数组元素的目标和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; <span class="built_in">check</span>(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体问题的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见问题分类：</p><p>​    (1) 对于一个序列，用两个指针维护一段区间<br>​    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</p><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>—— 模板题 AcWing 802. 区间和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值</span></span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 找到第一个大于等于x的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p>—— 模板题 AcWing 803. 区间合并</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">    </span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2021/09/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2021/09/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>—— 模板题 AcWing 826. 单链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="keyword">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><p>—— 模板题 AcWing 827. 双链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="keyword">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>—— 模板题 AcWing 828. 模拟栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tt表示栈顶</span></span><br><span class="line"><span class="keyword">int</span> stk[N], tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向栈顶插入一个数</span></span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出一个数</span></span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶的值</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span> (tt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>—— 模板题 AcWing 829. 模拟队列</p><h4 id="1-普通队列"><a href="#1-普通队列" class="headerlink" title="1.普通队列"></a>1.普通队列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="keyword">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-循环队列"><a href="#2-循环队列" class="headerlink" title="2.循环队列"></a>2.循环队列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾的后一个位置</span></span><br><span class="line"><span class="keyword">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[tt ++ ] = x;</span><br><span class="line"><span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"><span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hh != tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>—— 模板题 AcWing 830. 单调栈</p><p>常见模型：找出每个数左边离它最近的比它大/小的数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (tt &amp;&amp; <span class="built_in">check</span>(stk[tt], i)) tt -- ;</span><br><span class="line">    stk[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p>—— 模板题 AcWing 154. 滑动窗口</p><p>常见模型：找出滑动窗口中的最大值/最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check_out</span>(q[hh])) hh ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check</span>(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>—— 模板题 AcWing 831. KMP字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line"><span class="comment">//求模式串的Next数组：</span></span><br><span class="line"><span class="comment">//数组下标从1开始，输入时记得把地址加1！</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><p>—— 模板题 AcWing 835. Trie字符串统计</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">// 0号点既是根节点，又是空节点</span></span><br><span class="line"><span class="comment">// son[][]存储树中每个节点的子节点</span></span><br><span class="line"><span class="comment">// cnt[]存储以每个节点结尾的单词数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询字符串出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>—— 模板题 AcWing 836. 合并集合, AcWing 837. 连通块中点的数量</p><p>思路：</p><p>目的：1.将两个集合合并 2.询问两个元素是否在一个集合当中</p><p>基本原理：每个集合用一棵树来表示。树根的编号就是整个集合的编号。每个节点储存它的父节点，p[x]表示x的父节点</p><p>问题1：如何判断树根：if(p[x] == x);</p><p>问题2：如何求x的集合编号： while(p[x] != x) x = p[x];（时间复杂度高，用路径压缩进行优化）（按秩合并）</p><p>问题3：如何合并两个集合 ：把一个树插到另一个树上，px是x的集合编号，py是y的集合编号。p[x] = y;</p><h4 id="1-朴素并查集："><a href="#1-朴素并查集：" class="headerlink" title="(1)朴素并查集："></a>(1)朴素并查集：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[N]; <span class="comment">//存储每个点的父节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br></pre></td></tr></table></figure><h4 id="2-维护size的并查集："><a href="#2-维护size的并查集：" class="headerlink" title="(2)维护size的并查集："></a>(2)维护size的并查集：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[N], size[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br></pre></td></tr></table></figure><h4 id="3-维护到祖宗节点距离的并查集："><a href="#3-维护到祖宗节点距离的并查集：" class="headerlink" title="(3)维护到祖宗节点距离的并查集："></a>(3)维护到祖宗节点距离的并查集：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[N], d[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x] += d[p[x]];</span><br><span class="line">        p[x] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    d[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>—— 模板题 AcWing 838. 堆排序, AcWing 839. 模拟堆</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="keyword">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);</span><br></pre></td></tr></table></figure><h3 id="一般哈希"><a href="#一般哈希" class="headerlink" title="一般哈希"></a>一般哈希</h3><p>—— 模板题 AcWing 840. 模拟散列表</p><h4 id="1-拉链法"><a href="#1-拉链法" class="headerlink" title="(1) 拉链法"></a>(1) 拉链法</h4><p>找数字N时 应选择大于所需要的数的最小质数（更快）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向哈希表中插入一个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k];</span><br><span class="line">    h[k] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 在哈希表中查询某个数是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-开放寻址法"><a href="#2-开放寻址法" class="headerlink" title="(2) 开放寻址法"></a>(2) 开放寻址法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        t ++ ;</span><br><span class="line">        <span class="keyword">if</span> (t == N) t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p>—— 模板题 AcWing 841. 字符串哈希</p><p>核心思想：</p><p>将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低</p><p>小技巧：</p><p>取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line">ULL h[N], p[N]; <span class="comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算子串 str[l ~ r] 的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-STL简介"><a href="#C-STL简介" class="headerlink" title="C++ STL简介"></a>C++ STL简介</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">vector, 变长数组，倍增的思想</span><br><span class="line">    size()  返回元素个数</span><br><span class="line">    empty()  返回是否为空</span><br><span class="line">    clear()  清空</span><br><span class="line">    front()/back()</span><br><span class="line">    push_back()/pop_back()</span><br><span class="line">    begin()/end() 迭代器 相当于地址 可以解引用</span><br><span class="line">    遍历：</span><br><span class="line">    for(vector&lt;int&gt;::iterator i = a.begin(); i != a.end(); i++)&#123;&#125;</span><br><span class="line">    []</span><br><span class="line">    支持比较运算，按字典序</span><br><span class="line"></span><br><span class="line">pair&lt;int, int&gt;</span><br><span class="line">    first, 第一个元素</span><br><span class="line">    second, 第二个元素</span><br><span class="line">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span><br><span class="line"></span><br><span class="line">string，字符串</span><br><span class="line">    size()/length()  返回字符串长度</span><br><span class="line">    empty()</span><br><span class="line">    clear()</span><br><span class="line">    substr(起始下标，(子串长度))  返回子串</span><br><span class="line">    c_str()  返回字符串所在字符数组的起始地址</span><br><span class="line"></span><br><span class="line">queue, 队列</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    push()  向队尾插入一个元素</span><br><span class="line">    front()  返回队头元素</span><br><span class="line">    back()  返回队尾元素</span><br><span class="line">    pop()  弹出队头元素</span><br><span class="line"></span><br><span class="line">priority_queue, 优先队列，默认是大根堆</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    push()  插入一个元素</span><br><span class="line">    top()  返回堆顶元素</span><br><span class="line">    pop()  弹出堆顶元素</span><br><span class="line">    定义成小根堆的方式：priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">stack, 栈</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    push()  向栈顶插入一个元素</span><br><span class="line">    top()  返回栈顶元素</span><br><span class="line">    pop()  弹出栈顶元素</span><br><span class="line"></span><br><span class="line">deque, 双端队列</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    clear()</span><br><span class="line">    front()/back()</span><br><span class="line">    push_back()/pop_back()</span><br><span class="line">    push_front()/pop_front()</span><br><span class="line">    begin()/end()</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列</span><br><span class="line">    size()</span><br><span class="line">    empty()</span><br><span class="line">    clear()</span><br><span class="line">    begin()/end()</span><br><span class="line">    ++, -- 返回前驱和后继，时间复杂度 O(logn)</span><br><span class="line">    set/multiset</span><br><span class="line">        insert()  插入一个数</span><br><span class="line">        find()  查找一个数</span><br><span class="line">        count()  返回某一个数的个数</span><br><span class="line">        erase()</span><br><span class="line">            (1) 输入是一个数x，删除所有x   O(k + logn)</span><br><span class="line">            (2) 输入一个迭代器，删除这个迭代器</span><br><span class="line">        lower_bound()/upper_bound()</span><br><span class="line">            lower_bound(x)  返回大于等于x的最小的数的迭代器</span><br><span class="line">            upper_bound(x)  返回大于x的最小的数的迭代器</span><br><span class="line">    map/multimap</span><br><span class="line">        insert()  插入的数是一个pair</span><br><span class="line">        erase()  输入的参数是pair或者迭代器</span><br><span class="line">        find()</span><br><span class="line">        []  注意multimap不支持此操作。 时间复杂度是 O(logn)</span><br><span class="line">        lower_bound()/upper_bound()</span><br><span class="line"></span><br><span class="line">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表</span><br><span class="line">    和上面类似，增删改查的时间复杂度是 O(1)</span><br><span class="line">    不支持 lower_bound()/upper_bound()， 迭代器的++，--</span><br><span class="line"></span><br><span class="line">bitset, 圧位</span><br><span class="line">    bitset&lt;10000&gt; s;</span><br><span class="line">    ~, &amp;, |, ^</span><br><span class="line">    &gt;&gt;, &lt;&lt;</span><br><span class="line">    ==, !=</span><br><span class="line">    []</span><br><span class="line">    count()  返回有多少个1</span><br><span class="line">    </span><br><span class="line">    any()  判断是否至少有一个1</span><br><span class="line">    none()  判断是否全为0</span><br><span class="line">    </span><br><span class="line">    set()  把所有位置成1</span><br><span class="line">    set(k, v)  将第k位变成v</span><br><span class="line">    reset()  把所有位变成0</span><br><span class="line">    flip()  等价于~</span><br><span class="line">    flip(k) 把第k位取反</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
